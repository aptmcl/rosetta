;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;COMMON PART

(provide Shape Shapes Ref)

;;References
(define-type Refs (Listof Ref))

;;Boolean operations might fail.
;;Given that we want to take advantage of the static type checker, we
;;will represent those failed operations using a distinct type.

(define-type Failed-Operation (U failed-union failed-subtraction))
(define-type RefOp (U Ref Failed-Operation))
(define-type RefOps (Listof RefOp))

(struct failed-union
  ([refs : RefOps]))

(struct failed-subtraction
  ([refs : RefOps]))

;;Shapes will contain non-flattened Refs
(define-type Shape (Base-Shape RefOp))
(define-type Shapes (Base-Shapes RefOp))

(: empty-shape-ref (-> RefOp))
(: empty-shape-ref? (-> RefOp Boolean))
(: universal-shape-ref (-> RefOp))
(: universal-shape-ref? (-> RefOp Boolean))

(: delete-shape (-> Shape Void))
(: delete-shapes (-> Shapes Void))

;;The empty shapes

(def-shape (empty-shape) (empty-shape-ref))
(define (empty-shape? [s : Shape]) : Boolean (empty-shape-ref? (shape-reference s)))
(def-shape (universal-shape) (universal-shape-ref))
(define (universal-shape? [s : Shape]) : Boolean (universal-shape-ref? (shape-reference s)))

;;;;;;;;;;;;;;;;;;

(define (shape-ref [shape : Shape]) : Ref
  (let ((ref (shape-reference shape)))
    (if (ref? ref)
        ref
        (error 'shape-ref "Shape without definite reference ~a" shape))))

;;or its multiple references
(define (shape-refs [shape : Shape]) : Refs
  (let rec : Refs ([ref : RefOp (shape-reference shape)])
    (cond ((failed-union? ref)
           (apply append (map rec (failed-union-refs ref))))
          ((failed-subtraction? ref)
           (apply append (map rec (failed-subtraction-refs ref))))
          (else
           (list ref)))))

;;From a list of shapes, we might want to retrieve all references
(define (shapes-refs [shapes : Shapes]) : Refs
  (if (null? shapes)
      (list)
      (append (shape-refs (car shapes))
              (shapes-refs (cdr shapes)))))

;;We also need to check if a particular ref is present
(define (member-ref? [r0 : Ref] [r1 : RefOp]) : Boolean
  (let rec : Boolean ([ref : RefOp r1])
    (cond ((failed-union? ref)
           (ormap rec (failed-union-refs ref)))
          ((failed-subtraction? ref)
           (ormap rec (failed-subtraction-refs ref)))
          (else
           (eq? r0 ref)))))

(define (ref-or-union [ref : (U RefOp RefOps)]) : RefOp
  (if (list? ref)
      (single-ref-or-union (cast ref RefOps)) ;; HACK Revise this cast
      ref))

(define-syntax-rule
  (map-ref ([r expr]) body ...)
  (let rec : RefOp ([r : RefOp (shape-reference expr)])
    (cond ((failed-union? r)
           (failed-union ;;Should we attempt union again?
            (map rec (failed-union-refs r))))
          ((failed-subtraction? r)
           (failed-subtraction
            (map rec (failed-subtraction-refs r)))
           #;(subtract-refs
              (rec (car (failed-subtraction-refs r)))
              (map rec (cdr (failed-subtraction-refs r)))))
          (else
           (ref-or-union
            (begin body ...))))))

(define-syntax-rule
  (do-ref ([r expr]) body ...)
  (let ((s expr))
    (let rec : Void ([r : RefOp (shape-reference s)])
      (cond ((failed-union? r)
             (for-each rec (failed-union-refs r)))
            ((failed-subtraction? r)
             (for-each rec (failed-subtraction-refs r)))
            (else
             body ...
	     (void))))))

(define (copy-ref-op [r : RefOp]) : RefOp
  (cond ((failed-union? r)
         (failed-union (map copy-ref-op (failed-union-refs r))))
        ((failed-subtraction? r)
         (failed-subtraction (map copy-ref-op (failed-subtraction-refs r))))
        (else
         (copy-ref r))))

(define (copy-n-ref-op [r : RefOp] [n : Index]) : RefOps
  (if (= n 0)
      (error "Can't copy a shape zero times.")
      (let rec ([n n])
        (if (= n 1)
            (list r)
            (cons (copy-ref-op r)
                  (rec (- n 1)))))))

;;Due to sharing, we might try to delete a shape more than once
(define (delete-shape [shape : Shape]) : Void
  (when (realized? shape)
    (cond ((union? shape)
           (for-each delete-shape (union-shapes shape)))
          ((intersection? shape)
           (for-each delete-shape (intersection-shapes shape)))
          ((subtraction? shape)
           (for-each delete-shape (subtraction-shapes shape)))
          (else
           (delete-basic-shape shape)))
    (mark-deleted! shape)))

(define (mark-shape-deleted! [shape : Shape]) : Void
  (when (realized? shape)
    (cond ((union? shape)
           (for-each mark-shape-deleted! (union-shapes shape)))
          ((intersection? shape)
           (for-each mark-shape-deleted! (intersection-shapes shape)))
          ((subtraction? shape)
           (for-each mark-shape-deleted! (subtraction-shapes shape))))
    (mark-deleted! shape)))

(define (delete-shapes [shapes : Shapes (list)]) : Void
  (for-each delete-shape shapes))

#|

Boolean operations can fail for a variety of reasons. Particularly, if
there is no common point between the boundary representation of the solids, the
operation will surely fail.

As a first example, consider the union of three spheres:

(%boolean-union (list (%add-sphere (x -1) 1) (%add-sphere (x +1) 1) (%add-sphere (x 0) 1)))

The result is that the sphere at (x -1) disappears. However, if we swap the order
of arguments, so that the sphere at (x 0) is in the middle of the arguments,

(%boolean-union (list (%add-sphere (x -1) 1) (%add-sphere (x 0) 1) (%add-sphere (x +1) 1)))

we get the expected result. It seems that, as long as there is some common point between
adjacent arguments, Rhino will compute the operation correctly.

As another example, if we attempt to make a hollow sphere by subtracting a smaller
sphere from a larger sphere, the operation will fail. Obviously, we can't see the
interior of the hollow sphere, unless we slice it or subtract something that intersects
both spheres.

If we want to allow this, we need to use a kind of boolean algebra, so that, in the case
of the sliced hollow sphere, we can start writing

(slice (subtraction S0 S1))

and, internally, we compute

(subtraction (slice S0) S1)

Similarly, if we want

(subtraction (subtraction S0 S1) S2)

and it doesn't work because S1 is entirely contained in S0, we can write instead

(subtraction (subtraction S0 S2) S1)

or even

(subtraction S0 (union S1 S2))

In order to implement this, we need to create shapes that represent failed operations.

|#

(define (single-ref-or-union [refs : RefOps]) : RefOp
  (if (null? (cdr refs))
      (car refs)
      (failed-union refs)))

(define (single-ref-or-empty-ref-or-union [refs : RefOps]) : RefOp
  (let ((refs (remf empty-shape-ref? refs)))
    (cond ((null? refs)
           (empty-shape-ref))
          ((null? (cdr refs))
           (car refs))
          (else
           (failed-union refs)))))

(define #:forall (T) (maximize-combination [op : (-> T T (Option T))] [rs : (Listof T)]) : (Listof T)
  (define (combine [r0 : T] [rs : (Listof T)]) : (Listof T)
    (if (null? rs)
        (list r0)
        (let ([r1 (car rs)]
              [rs (cdr rs)])
          (let ((r (op r0 r1)))
            (if r
                (cons r rs)
                (cons r1 (combine r0 rs)))))))
  (cond ((null? rs) (list))
        ((null? (cdr rs)) rs)
        (else
         (let loop : (Listof T)
           ([rs : (Listof T) rs] [combs : (Listof T) (list)] [n : Integer (length rs)])
           (if (null? rs)
               (if (= n (length combs)) ;;no changes
                   combs
                   (loop combs (list) (length combs)))
               (let ([r1 (car rs)]
                     [rs (cdr rs)])
                 (loop rs (combine r1 combs) n)))))))

(define (intersect-refs [rs : RefOps]) : RefOp
  (if (null? (cdr rs))
      (car rs)
      (intersect-1-1 (car rs) (intersect-refs  (cdr rs)))))

(define (intersect-1-1 [r0 : RefOp] [r1 : RefOp]) : RefOp
  (show "intersect-1-1:" r0 r1)
  (cond ((empty-shape-ref? r0)
         (empty-shape-ref))
        ((ref? r0)
         (cond ((empty-shape-ref? r1)
                (empty-shape-ref))
               ((ref? r1)
                (intersect-ref r0 r1))
               ((failed-union? r1)
                (intersect-1-* r0 (failed-union-refs r1)))
               ((failed-subtraction? r1)
                (subtract-refs (intersect-1-1 r0 (car (failed-subtraction-refs r1)))
                               (cdr (failed-subtraction-refs r1))))
               (else
                (error "I was not expecting this:" r0 r1))))
        ((failed-union? r0)
         (intersect-*-1 (failed-union-refs r0) r1))
        ((failed-subtraction? r0)
         (subtract-refs (intersect-1-1 (car (failed-subtraction-refs r0)) r1)
                        (cdr (failed-subtraction-refs r0))))
        (else
         (error "Finish this" r0 r1))))

(define (intersect-*-1 [rs : RefOps] [r : RefOp]) : RefOp
  (show "intersect-*-1:" rs r)
  (if (null? rs)
      (empty-shape-ref)
      (single-ref-or-empty-ref-or-union
       (map (lambda ([r0 : RefOp] [r1 : RefOp])
              (intersect-1-1 r0 r1))
            rs
            (copy-n-ref-op r (length rs))))))

;;Intersection should symmetric, but we don't trust Rhino
(define (intersect-1-* [r : RefOp] [rs : RefOps]) : RefOp
  (show "intersect-1-*:" rs r)
  (if (null? rs)
      (empty-shape-ref)
      (single-ref-or-empty-ref-or-union
       (map (lambda ([r0 : RefOp] [r1 : RefOp])
              (intersect-1-1 r0 r1))
            (copy-n-ref-op r (length rs))
            rs))))

(def-shape* (union [shapes : Shape *])
  (maybe-delete-shapes
   shapes
   (let ((shapes (filter-not empty-shape? (remove-duplicates shapes))))
     (cond ((null? shapes)
            (empty-shape-ref))
           ((null? (cdr shapes))
            (shape-reference (car shapes)))
           ((ormap universal-shape? shapes)
            (universal-shape-ref))
           (else
            (let*-values
                ([(rs) (map (inst shape-reference RefOp) shapes)]
                 [(failed-unions rs) (partition failed-union? rs)]
                 [(failed-subtractions rs) (partition failed-subtraction? rs)]
                 [(united)
                  #;(union-refs ;;We don't actually unite them
                     (cast (append rs (apply append (map failed-union-refs failed-unions)))
                           Refs))
                  (append rs (apply append (map failed-union-refs failed-unions)))])
              (single-ref-or-union
               (append united failed-subtractions))))))))

(define (maybe-delete-shapes [ss : Shapes] [rs : RefOp]) : RefOp
  (for ([s : Shape (in-list ss)])
    (unless (for/or : Boolean ([r : Ref (in-list (shape-refs s))])
              (member-ref? r rs))
      (delete-shape s)))
  rs)

(def-shape* (intersection [shapes : Shape *])
  (maybe-delete-shapes
   shapes
   (let ((ss (filter-not universal-shape? (remove-duplicates shapes))))
     (cond ((null? ss)
            (universal-shape-ref))
           ((null? (cdr ss))
            (shape-reference (car ss)))
           ((ormap empty-shape? ss)
            (delete-shapes ss)
            (empty-shape-ref))
           (else
            (intersect-refs (map (inst shape-reference RefOp) ss)))))))

(def-shape* (subtraction [shapes : Shape *])
  (maybe-delete-shapes
   shapes
   (if (null? shapes)
       (error "No shapes to subtract")
       (let ((s (car shapes))
             (ss (filter-not empty-shape? (cdr shapes))))
         (cond ((null? ss)
                (shape-reference s))
               ((or (empty-shape? s)
                    (ormap (lambda ([o : Shape])
                             (or (universal-shape? o)
                                 (eq? s o))) ;;Perhaps we should use a equal-shape? test
                           ss))
                (empty-shape-ref))
               (else
                (let ([r (shape-reference s)]
                      [rs (map (inst shape-reference RefOp) ss)])
                  (subtract-refs r rs))))))))

(define #:forall (T) (show [msg : String] [a : T] . [as : Any *]) : T
  #;#;#;#;
  (display msg)
  (display a)
  (for-each display as)
  (newline)
  a)

(define (subtract-refs [r : RefOp] [rs : RefOps]) : RefOp
  (show "subtract-refs:" r rs)
  (if (null? rs)
      r
      (let*-values ([(failed-unions rs) (partition failed-union? rs)]
                    [(failed-subtractions rs) (partition failed-subtraction? rs)]
                    [(rs) (append rs (apply append (map failed-union-refs failed-unions)))])
        (assert failed-subtractions null?)
        (subtract-1-1 r (single-ref-or-union rs)))))

(define (subtract-1-1 [r0 : RefOp] [r1 : RefOp]) : RefOp
  (show "subtract-1-1:" r0 r1)
  (cond ((and (ref? r0) (ref? r1))
         (subtract-ref r0 r1))
        ((and (ref? r0) (failed-union? r1))
         (subtract-1-* r0 (failed-union-refs r1)))
        ((and (ref? r0) (failed-subtraction? r1))
         (error "Finish this")
         #;
         (union-refs (subtract-1-1 r0 (car (failed-subtraction-refs r1)))
                     (map (lambda ([r : RefOp])
                            (intersection-ref r0 r))
                          (cdr (failed-subtraction-refs r1)))))
        ((and (failed-union? r0) (ref? r1))
         (single-ref-or-union
          (subtract-*-1 (failed-union-refs r0) r1)))
        ((and (failed-union? r0) (failed-union? r1))
         (single-ref-or-union
          (subtract-*-* (failed-union-refs r0) (failed-union-refs r1))))
        ((and (failed-union? r0) (failed-subtraction? r1))
         (error "Finish this")
         #;
         (let ((extra (map (lambda ([r : RefOp])
                             (intersection-ref (copy-ref-op r0) r))
                           (cdr (failed-subtraction-refs r1)))))
           (union-refs (subtract-*-1 (failed-union-refs r0) (car (failed-subtraction-refs r1)))
                       extra)))
        ((and (failed-subtraction? r0) (ref? r1))
         ;;We attempt the subtraction, but we need to check the result
         (let ((res (subtract-1-1 (car (failed-subtraction-refs r0)) r1)))
           (cond ((failed-subtraction? res)
                  (failed-subtraction (append (failed-subtraction-refs r0) (list r1))))
                 (else
                  (subtract-1-* res (cdr (failed-subtraction-refs r0)))))))
        ((and (failed-subtraction? r0) (failed-union? r1))
         (subtract-refs
          (subtract-1-* (car (failed-subtraction-refs r0)) (failed-union-refs r1))
          (cdr (failed-subtraction-refs r0))))
        ((and (failed-subtraction? r0) (failed-subtraction? r1))
         (subtract-refs
          (subtract-1-* (car (failed-subtraction-refs r0)) (failed-subtraction-refs r1))
          (cdr (failed-subtraction-refs r0))))
        (else
         (error "Finish this" r0 r1))))

(define (subtract-*-1 [rs : RefOps] [r : RefOp]) : RefOps
  (show "subtract-*-1:" rs r)
  (if (null? rs)
      (list)
      (let ((res
             (subtract-1-1
              (car rs)
              (if (null? (cdr rs)) r (copy-ref-op r)))))
        (let ((rest (subtract-*-1 (cdr rs) r)))
          (if res
              (cons res rest)
              rest)))))

(define (subtract-1-* [r : RefOp] [rs : RefOps]) : RefOp
  (show "subtract-1-*:" r rs)
  (if (null? rs)
      r
      (let ((res (subtract-1-1 r (car rs))))
        (cond ((empty-shape-ref? res)
               res)
              (else
               (subtract-1-* res (cdr rs)))))))

(define (subtract-*-* [r0s : RefOps] [r1s : RefOps]) : RefOps
  (show "subtract-*-*:" r0s r1s)
  (cond ((null? r0s)
         (list))
        ((null? r1s)
         r0s)
        (else
         (subtract-*-*
          (subtract-*-1 r0s (car r1s))
          (cdr r1s)))))


;;Additional stuff
(: view (->* () ((Option Loc) (Option Loc) (Option Real)) (Values Loc Loc Real)))

(provide view-expression)
(define (view-expression) ;: (List Symbol (List Symbol Loc Loc Loc) (List Symbol Loc Loc Loc) Real)
  (let-values (((c t l) (view)))
    `(view (xyz ,(cx c) ,(cy c) ,(cz c))
           (xyz ,(cx t) ,(cy t) ,(cz t))
           ,l)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;END OF COMMON PART
